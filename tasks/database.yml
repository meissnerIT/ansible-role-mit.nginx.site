---
- name: Setting defaults (1/2)
  ansible.builtin.set_fact:
    # This will only be used if database_user_host != 'localhost'
    database_require_tls: "{{ database_require_tls | default(True) }}"
    login_host: "{{ database_host | default(inventory_hostname) }}"
    login_unix_socket: "{% if database_port is defined %}{% else %}/var/run/mysqld/mysqld.sock{% endif %}"
    # login_port has to be int and not empty. If login_unix_socket is set port is not used.
    login_port: "{{ database_port | default(0) }}"
    state: "{{ state | default('present') }}"

- name: Setting defaults (2/2)
  ansible.builtin.set_fact:
    create_or_remove: "{{ 'Remove' if (state == 'absent') else 'Create' }}"

- name: Check if database.txt exists
  ansible.builtin.stat:
    path: /srv/www/{{ site }}/database.txt
  register: database_txt_stat
  when: state!='absent'

- name: Create password
  ansible.builtin.set_fact:
    # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/password_lookup.html
    database_password: "{{ lookup('password', '/dev/null length=20') }}"
  when: (state!='absent') and (not database_txt_stat.stat.exists)

- name: Create database.txt
  ansible.builtin.copy:
    content: "{{ database_password }}"
    dest: /srv/www/{{ site }}/database.txt
    group: "{{ group }}"
    mode: "0640"
  when: (state!='absent') and (not database_txt_stat.stat.exists)

- name: Read password from database.txt
  ansible.builtin.slurp:
    src: /srv/www/{{ site }}/database.txt
  register: database_txt_content
  when: state!='absent'

- name: Set variable database_password from database.txt
  ansible.builtin.set_fact:
    # b64decode: slurps content is base64 encoded
    # trim: If added via vi there might be an invisible "\n"
    database_password: "{{ database_txt_content.content | b64decode | trim }}"
  when: state!='absent'

# - name: Print returned information
#  ansible.builtin.debug:
#    msg: "{{ database_password }}"

# Requires python3-pymysql and NOT python3-mysqldb!
- name: "{{ create_or_remove }} database {{ database }} with python3-pymysql" # noqa: name[template]
  delegate_to: "{{ login_host }}"
  mysql_db:
    login_unix_socket: "{{ login_unix_socket }}"
    login_port: "{{ login_port }}"
    name: "{{ database }}"
    state: "{{ state }}"

- name: Create database user {{ database }}@{{ database_user_host }} # noqa: name[template]
  delegate_to: "{{ login_host }}"
  mysql_user:
    login_unix_socket: "{{ login_unix_socket }}"
    login_port: "{{ login_port }}"
    name: "{{ database }}"
    host: "{{ database_user_host }}"
    password: "{{ database_password }}"
    priv: "{{ database }}.*:ALL"
  when: (state!='absent') and (database_user_host == 'localhost' or database_require_tls == 'False')

# https://mariadb.com/kb/en/securing-connections-for-client-and-server/#requiring-tls
- name: Create database user {{ database }}@% with REQUIRE SSL # noqa: name[template]
  delegate_to: "{{ login_host }}"
  mysql_user:
    login_unix_socket: "{{ login_unix_socket }}"
    login_port: "{{ login_port }}"
    name: "{{ database }}"
    host: "%"
    password: "{{ database_password }}"
    priv: "{{ database }}.*:ALL"
    # https://github.com/ansible-collections/community.mysql/search?q=tls_requires
    tls_requires:
      SSL:
  when: state!='absent' and database_user_host == '%' and database_require_tls == 'True'

- name: Remove database user {{ database }}@{{ database_user_host }} # noqa: name[template]
  delegate_to: "{{ login_host }}"
  mysql_user:
    login_unix_socket: "{{ login_unix_socket }}"
    login_port: "{{ login_port }}"
    name: "{{ database }}"
    host: "{{ database_user_host }}"
    state: "{{ state }}"
  when: state=='absent'

- name: Check connection {{ inventory_hostname }} -> {{ login_host }} # noqa: name[template]
  ansible.builtin.command: mysql --ssl -h {{ login_host }} -u {{ database }} --password='{{ database_password }}' {{ database }} -e 'select 1'
  changed_when: false
  when: state!=absent and inventory_hostname != login_host
