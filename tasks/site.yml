---

- name: Setting defaults (1/2)
  set_fact:
    state: "{{ state|default('present') }}"
    update_facls: "{{ update_facls|default(True) }}"
    update_facls_dir: "{{ 'ci' if (htdocslink is defined) else 'htdocs' }}"

- name: Setting defaults (2/2)
  set_fact:
    nginx_client_max_body_size: "{{ nginx_client_max_body_size|default(php_fpm_upload_limit|default(false)) }}"
    create_or_remove: "{{ 'Remove' if (state=='absent') else 'Create' }}"
    file_state_directory: "{{ 'absent' if (state=='absent') else 'directory' }}"

# - debug: var=nginx_client_max_body_size

# Ensure default owner / group / mode (creating user fails without this)
- name: "{{ create_or_remove }} /srv/www/{{ site }}"
  file:
    path: /srv/www/{{ site }}
    state: "{{ file_state_directory }}"
  when: create_dir|default(true)

- name: Creating group {{ group }}
  group:
    name: "{{ group }}"
    system: yes
  when: state!='absent'

- name: Creating user {{ group }}
  user:
    name: "{{ group }}"
    group: "{{ group }}"
    home: /srv/www/{{ site }}/htdocs
    create_home: no # avoid skell files
    shell: /bin/false
    system: yes
  when: (create_user|default(true)) and (state!='absent')

- name: Adding www-data to group {{ group }}
  shell: adduser www-data {{ group }}
  register: adduser_wwwdata
  changed_when: "'is already a member of' not in adduser_wwwdata.stdout"
  notify: Reload nginx
  when: state!='absent'

- name: Creating deploy dir
  file:
    path: /srv/www/{{ site }}/ci
    state: directory
    owner: "{{ group }}"
    group: "{{ group }}"
    mode: 0770
  when: state!='absent' and htdocslink is defined

- name: Creating link to htdocs
  file:
    src: "{{ htdocslink }}"
    dest: /srv/www/{{ site }}/htdocs
    state: link
    owner: "{{ group }}"
    group: "{{ group }}"
    follow: no  # avoid error messages if link does not exists yet
    force: yes  # avoid error messages if link does not exists yet
  when: state!='absent' and htdocslink is defined

- name: Creating /srv/www/{{ site }}/htdocs
  file:
    path: /srv/www/{{ site }}/htdocs
    state: directory
    owner: "{{ group }}"
    group: "{{ group }}"
    mode: 0770
  when: state!='absent' and htdocslink is not defined

- name: Creating /srv/www/{{ site }}/logs
  file:
    path: /srv/www/{{ site }}/logs
    state: directory
    owner: root
    group: "{{ group }}"
    mode: 0750
  when: state!='absent'

- name: Creating /srv/www/{{ site }}/tmp
  file:
    path: /srv/www/{{ site }}/tmp/php
    state: directory
  when: state!='absent' and php_fpm_upload_limit is defined

- name: Creating /srv/www/{{ site }}/tmp/nginx
  file:
    path: /srv/www/{{ site }}/tmp/nginx
    state: directory
    owner: www-data
    group: www-data
    mode: 0770
  when: state!='absent' and php_fpm_upload_limit is defined

- name: Creating /srv/www/{{ site }}/tmp/php
  file:
    path: /srv/www/{{ site }}/tmp/php
    state: directory
    owner: "{{ group }}"
    group: "{{ group }}"
    mode: 0770
  when: state!='absent' and php_fpm_upload_limit is defined

# doesn't work on session, don't know why
- name: Enable group adm to read /srv/www/{{ site }}/logs via ACL
  acl:
    path: /srv/www/{{ site }}/logs/
    entity: adm
    etype: group
    permissions: rx
    state: present
  when: state!='absent'

- name: Check deprecated conf.d/ssl-site (without .include)
  command: ls /etc/nginx/conf.d/ssl-{{ site }}
  register: cmd_ls
  failed_when: cmd_ls.rc == 0
  changed_when: no

- name: Create /etc/nginx/conf.d/server-{{ site }}.conf
  template:
    src: nginx-server-template.conf
    dest: /etc/nginx/conf.d/server-{{ site }}.conf
    force: "{{ nginx_overwrite_config | default('no') }}"
  when: state!='absent'

- name: Remove /etc/nginx/conf.d/server-{{ site }}.conf
  file:
    dest: /etc/nginx/conf.d/server-{{ site }}.conf
    state: absent
  notify: Reload nginx
  when: state=='absent'

- name: Create /etc/nginx/conf.d/server-{{ site }}.include
  copy:
    content: ''
    dest: /etc/nginx/conf.d/server-{{ site }}.include
    force: no
  when: nginx_include_other|default(false) and state!='absent'

- name: Remove /etc/nginx/conf.d/server-{{ site }}.include
  file:
    dest: /etc/nginx/conf.d/server-{{ site }}.include
    state: absent
  notify: Reload nginx
  when: state=='absent'

- name: Create /etc/nginx/conf.d/server-{{ site }}.htpasswd
  copy:
    content: ''
    dest: /etc/nginx/conf.d/server-{{ site }}.htpasswd
    force: no
    group: www-data
    mode: 0640
  when: (nginx_create_htpasswd|default(false) or nginx_include_auth_basic|default(false)) and state!='absent'

- name: Remove /etc/nginx/conf.d/server-{{ site }}.htpasswd
  file:
    dest: /etc/nginx/conf.d/server-{{ site }}.htpasswd
    state: absent
  when: state=='absent'

- name: Create /etc/php/{{ php_version }}/fpm/pool.d/{{ site }}.conf
  template:
    src: php-fpm-pool-template.conf
    dest: /etc/php/{{ php_version }}/fpm/pool.d/{{ site }}.conf
    force: "{{ php_fpm_overwrite_config | default('no') }}"
  notify: Reload php{{ php_version }}-fpm
  when: state!='absent' and php_version is defined

- name: Remove /etc/php/{{ php_version }}/fpm/pool.d/{{ site }}.conf
  file:
    dest: /etc/php/{{ php_version }}/fpm/pool.d/{{ site }}.conf
    state: absent
  notify: Reload php{{ php_version }}-fpm
  when: state=='absent'

- name: Update /etc/update-facls.conf
  lineinfile:
    path: /etc/update-facls.conf
    regexp: "^/srv/www/{{ site }}/{{ update_facls_dir }}"
    line: "/srv/www/{{ site }}/{{ update_facls_dir }} {{ group }} {{ group }}"
    state: "{{ state }}"
  when: update_facls

- name: Allow execution of service commands via sudo
  template:
    src: sudoers.d-local-group
    dest: /etc/sudoers.d/local-group-{{ group }}
    mode: 0440
    validate: visudo -cf %s
  when: state!='absent'

- name: Remove sudoers file
  file:
    dest: /etc/sudoers.d/local-group-{{ group }}
    state: absent
  when: state=='absent'

# https://docs.ansible.com/ansible/latest/user_guide/playbooks_handlers.html#controlling-when-handlers-run
- name: Flush handlers
  meta: flush_handlers

- name: Remove user {{ group }}
  user:
    name: "{{ group }}"
    state: absent
  when: state=='absent'

- name: Remove group {{ group }}
  group:
    name: "{{ group }}"
    state: absent
  when: state=='absent'

